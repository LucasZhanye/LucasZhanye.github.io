[{"categories":["Hugo"],"content":"很长一段时间没有整博客，也没时间写博客，最近又重新捣鼓上了，还是觉得得自己搭一个，这次选择的是Hugo这个静态站点生成器，结合Github就能搭建出属于自己的一个博客平台了。 具体Hugo的搭建方式，网上应该有一堆的教程了，我这里就只做一些简单的记录，更细节的还得深入探索才行。（其实还是蛮适合小白的，主要是流程清晰） ","date":"2024-04-26","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:0:0","tags":["hugo"],"title":"Hugo搭建个人博客","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Hugo"],"content":"1. 安装 直接看官方文档Windows | Hugo官方文档 安装完成后，可以做个测试确认是否安装成功，一般是获取下版本号： \u003ehugo version hugo v0.124.1-db083b05f16c945fec04f745f0ca8640560cf1ec+extended windows/amd64 BuildDate=2024-03-20T11:40:10Z VendorInfo=gohugoio 看到以上输出信息就表示hugo已经安装成功了。 ","date":"2024-04-26","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:0:1","tags":["hugo"],"title":"Hugo搭建个人博客","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Hugo"],"content":"2. 创建站点 在终端输入命令：hugo new site Test，就会生成一个Test的目录，里面的子目录就是Hugo创建的，用于站点内容，结构，行为和呈现的,具体每个目录的作用干嘛的，还是直接去看官方文档。 这里要说下的是hugo.toml是整个站点的配置文件，接下来的配置也主要是针对它。 ","date":"2024-04-26","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:0:2","tags":["hugo"],"title":"Hugo搭建个人博客","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Hugo"],"content":"3. 选择主题 hugo启动站点前，需要先配置好主题（否则你会得到一个Page Not Found页面），这里推荐一款Loveit，网上用的人也挺多，我自己本身使用的也是这个，照例甩上官方文档主题文档 - 基本概念 - LoveIt 可以从Github上直接下载这个主题的源码，放入themes这个目录，然后在hugo.toml中配置上theme = \"LoveIt\"就可以了。 接下来就可以本地启动站点进行预览了，进入到站点目录中，还是使用终端敲命令： hugo serve -D 然后访问本地的:http://127.0.0.1:1313,就可以看到你的站点了，当然目前的站点空空如也，啥也没有。 你可以创建一篇文章，使用命令:hugo new posts/test.md,这样就会自动在子目录content下创建一个目录posts，并且创建了一个test.md文件，编辑test.md文件，就是你的博客文件。 title: 提示 1. 首先，你要想这个博客能在网页站点上显示出来，你需要将头部的`draft`设置为true，表示非草稿 2. 然后你需要重新启动下命令`hugo server -D`,好像也可以不用，只需要刷新网页就可以 然后你就可以看到如下图： image.png 初始界面如上图，是不是很简陋，那是因为我们还没加上一些主题的配置。 ","date":"2024-04-26","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:0:3","tags":["hugo"],"title":"Hugo搭建个人博客","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Hugo"],"content":"4.配置 既然选择了主题Loveit，那想要漂亮肯定是要按要求配置的，不懂的怎么配置可以参考这个主题自带的一个example，路径在:themes/LoveIt/exampleSite/config.toml 简单粗暴，可以将这个文件内容直接复制，然后粘贴到站点根目录下的hugo.toml，然后根据显示的页面再去具体调配。 这里放上我用的配置： baseURL = \"https://LucasZhanye.github.io/\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" # 网站标题 title = \"LucasZhang个人博客\" defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"zh-CN\" # 语言名称 [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true # 默认每页列表显示的文章数目 paginate = 12 # 谷歌分析代号 [UA-XXXXXXXX-X] googleAnalytics = \"\" # 版权描述，仅仅用于 SEO copyright = \"\" # 是否使用 robots.txt enableRobotsTXT = true # 是否使用 git 信息 #enableGitInfo = true # 是否使用 emoji 代码 enableEmoji = true # 忽略一些构建错误 ignoreErrors = [\"error-remote-getjson\", \"error-missing-instagram-accesstoken\"] # 作者配置 [author] name = \"LucasZhang\" email = \"\" # 菜单配置 [menu] [[menu.main]] weight = 1 identifier = \"home\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\u003ci class='fa-solid fa-house'\u003e\u003c/i\u003e\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"主页\" url = \"/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" [[menu.main]] weight = 2 identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\u003ci class='fa-brands fa-markdown'\u003e\u003c/i\u003e\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" [[menu.main]] weight = 3 identifier = \"tags\" pre = \"\u003ci class='fa-solid fa-tags'\u003e\u003c/i\u003e\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 4 identifier = \"categories\" pre = \"\u003ci class='fa-solid fa-list'\u003e\u003c/i\u003e\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" [[menu.main]] weight = 5 identifier = \"github\" pre = \"\u003ci class='fab fa-github fa-fw' aria-hidden='true'\u003e\u003c/i\u003e\" post = \"\" name = \"\" url = \"https://github.com/LucasZhanye\" title = \"GitHub\" # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) codeFences = true guessSyntax = true lineNos = true lineNumbersInTable = true # false 是必要的设置 # (https://github.com/dillonzq/LoveIt/issues/158) # Goldmark 是 Hugo 0.60 以来的默认 Markdown 解析库 noClasses = false # Goldmark 是 Hugo 0.60 以来的默认 Markdown 解析库 [markup.goldmark] [markup.goldmark.extensions] definitionList = true footnote = true linkify = true strikethrough = true table = true taskList = true typographer = true [markup.goldmark.renderer] # 是否在文档中直接使用 HTML 标签 unsafe = true # 目录设置 [markup.tableOfContents] startLevel = 2 endLevel = 6 [params] # 网站默认主题样式 [\"auto\", \"light\", \"dark\"] defaultTheme = \"light\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 #gitRepo = \"\" # LoveIt 新增 | 0.1.1 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # [\"sha256\", \"sha384\", \"sha512\", \"md5\"] fingerprint = \"sha256\" # LoveIt 新增 | 0.2.0 日期格式 dateFormat = \"2006-01-02\" # 网站标题, 用于 Open Graph 和 Twitter Cards title = \"LucasZhang个人博客\" # 网站描述, 用于 RSS, SEO, Open Graph 和 Twitter Cards description = \"\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"首页中间的图片\"] # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 [\"fixed\", \"normal\", \"auto\"] desktopMode = \"normal\" # 移动端导航栏模式 [\"fixed\", \"normal\", \"auto\"] mobileMode = \"normal\" # LoveIt 新增 | 0.2.0 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"/images/logo.png\" # 标题名称 name = \"LucasZhang个人博客\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # LoveIt 新增 | 0.2.5 是否为标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # LoveIt 新增 | 0.2.0 自定义内容 (支持 HTML 格式) custom = '' # LoveIt 新增 | 0.2.0 是否显示 Hugo 和主题信息 hugo = false # LoveIt 新增 | 0.2.0 是否显示版权信息 copyright = true # LoveIt 新增 | 0.2.0 是否显示作者 author = true # 网站创立年份 since = 2022 # ICP 备案信息，仅在中国使用 (支持 HTML 格式) icp = '' # 许可协议信息 (支持 HTML 格式) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # LoveIt 新增 | 0.2.0 Section (所有文章) 页面配置 [params.section] # section 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"","date":"2024-04-26","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:0:4","tags":["hugo"],"title":"Hugo搭建个人博客","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Hugo"],"content":"5. 部署到Github Page 有了前4步，一个静态博客网站其实已经成型了，只不过现在都是在你本地的，别人也没法访问到你的博客网站，这样好像也没啥意义。 因此我们需要借助一个平台来部署我们的博客，这里选择了Github Page，好像Gitee也是可以的，不过没试过，感兴趣可以去试试看哈。 其实最简单粗暴的方法可以很简单： 5.1 创建一个Github仓库 第一步，先到Github中创建一个仓库，仓库名称为XXX.github.io（XXX为你Github账号的用户名，替换即可），权限为public 5.2 上传 第二步，就是进到你站点的根目录，你会发现有一个public目录，这个目录就是你本地运行时生成的（也可以运行hugo命令部署生成），里面就是hugo给你渲染后的静态站点的资源文件这些，进入这个目录，把他上传到刚刚创建的Github仓库中，具体步骤就是： git init git remote add origin 你的Github仓库的路径 git add . git commit -m \"First commit\" git push -u origin master 5.3 完结 完成第二步后，去到Github页面确认文件都已经上传了，然后就可以直接打开浏览器，访问https://xxxx.github.io。就可以看到你的博客站点了。 5.4 以后 以后你想要发布博客，那你就得经历以下几个步骤哈： 本地生成博客文件(xxx.md)，编辑 本地运行看看效果，记得将draft改为true 或者执行hugo命令进行部署 进入public目录，执行git命令上传: git add . git commit -m \"xxxx\" git push 查看网站 ","date":"2024-04-26","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:0:5","tags":["hugo"],"title":"Hugo搭建个人博客","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["Hugo"],"content":"6. 小结 这一篇主要简单说下Hugo搭建过程，可能细节部分不是很到位，但是作为一个简单记录足够了，也不是什么重点内容，仅仅是记录一番。 PS：是不是会觉得这个博客文章的发布流程有些繁琐，确实是这样的，那有没有好的方法简化步骤？答案是有的，下一篇继续唠嗑。 ","date":"2024-04-26","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:0:6","tags":["hugo"],"title":"Hugo搭建个人博客","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["测试"],"content":"测试 测试一下发布文章效果 ","date":"2024-04-22","objectID":"/%E6%B5%8B%E8%AF%95/:0:1","tags":["test"],"title":"测试","uri":"/%E6%B5%8B%E8%AF%95/"},{"categories":["测试"],"content":"第二层 ","date":"2024-04-22","objectID":"/%E6%B5%8B%E8%AF%95/:0:2","tags":["test"],"title":"测试","uri":"/%E6%B5%8B%E8%AF%95/"}]